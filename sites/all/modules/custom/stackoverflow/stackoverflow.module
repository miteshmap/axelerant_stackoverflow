<?php
/**
 * @file
 * Code for the stackoverflow feature.
 */

include_once 'stackoverflow.features.inc';
include_once 'stackoverflow.field.inc';

define('STACKOVERFLOW_CONTENT_TYPE', 'question');

/**
 * Implements hook_permission().
 */
function stackoverflow_permission() {
  return array(
    'stackoverflow vote question' => array(
      'title' => t('Stackoverflow Grant user Vote up/down'),
      'description' => t('Grant users the ability to cast votes'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stackoverflow_menu() {
  $items = array();

  $items['questions'] = array(
    'title' => 'Question List',
    'description' => 'Question list page',
    'page callback' => 'stackoverflow_question_list_callback',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/stackoverflow.pages.inc',
  );

  $items['question/%node/vote/nojs/%'] = array(
    'title' => 'Question Vote',
    'description' => 'Question list page',
    'page callback' => 'stackoverflow_question_vote_update',
    'page arguments' => array(1, 3, 4),
    'access arguments' => array('stackoverflow vote question'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/stackoverflow.pages.inc',
  );

  $items['question/%node/vote/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['question/%node/vote/nojs/%'];

  return $items;
}

/**
 * Implements hook_theme().
 */
function stackoverflow_theme() {

  return array(
    'question_list' => array(
      'variables' => array(),
      'path' => drupal_get_path('module', 'stackoverflow') . '/theme',
      'file' => 'theme.inc',
    ),
    'question_row' => array(
      'variables' => array('node' => NULL),
      'template' => 'question-row',
      'path' => drupal_get_path('module', 'stackoverflow') . '/theme',
      'file' => 'theme.inc',
    ),
    'stackoverflow_vote' => array(
      'variables' => array('entity' => NULL, 'value' => NULL),
      'template' => 'stackoverflow-voteupdown',
      'path' => drupal_get_path('module', 'stackoverflow') . '/theme',
      'file' => 'theme.inc',
    )
  );
}


function axelerant_custom_page_callback() {
  return theme('question_list');
}


/**
 * Implements hook_node_view().
 */
function stackoverflow_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $node->type == STACKOVERFLOW_CONTENT_TYPE) {
    // Make sure Drupal Ajax framework javascript is around
    // drupal_add_library('system', 'drupal.ajax');
    stackoverflow_update_field_count($node, 'field_number_of_views');
  }
}

/**
 * Implements hook_form_alter().
 */
function stackoverflow_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'question_node_form':
      $form['#validate'][] = 'stackoverflow_question_node_validate';
      break;
  }
}

/**
 * Validate question_node form.
 */
function stackoverflow_question_node_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!empty($values['body'][LANGUAGE_NONE][0]['value'])) {
    $question = strip_tags($values['body'][LANGUAGE_NONE][0]['value']);
    if (!preg_match("/[?]$/", $question)) {
      form_set_error('body', t('Question must end with question mark(?).'));
    }
  }

  if ($values['field_number_of_answers'][LANGUAGE_NONE][0]['value'] != 0 &&
      $values['field_number_of_answers'][LANGUAGE_NONE][0]['value'] < 0) {
      form_set_error('field_number_of_answers', t('Answers value must not be less then 0.'));
  }


  if ($values['field_number_of_views'][LANGUAGE_NONE][0]['value'] != 0 &&
      $values['field_number_of_views'][LANGUAGE_NONE][0]['value'] < 0) {
    form_set_error('field_number_of_views', t('Views value must not be less then 0.'));
  }
}

/**
 * Implements hook_comment_insert().
 */
function stackoverflow_comment_insert($comment) {
  if ($comment->status != COMMENT_PUBLISHED) {
    return;
  }
  stackoverflow_update_field_count($comment->nid, 'field_number_of_answers');
}

/**
 * Implements hook_comment_update().
 */
function stackoverflow_comment_update($comment) {
  if ($comment->status != COMMENT_PUBLISHED) {
    return;
  }
  stackoverflow_update_field_count($comment->nid, 'field_number_of_answers');
}

/**
 * Implements hook_comment_delete().
 */
function stackoverflow_comment_delete($comment) {
  stackoverflow_update_field_count($comment->nid, 'field_number_of_answers', 'del');
}

/**
 * Update field count.
 *
 * @param $node
 *  Nid or the node object.
 * @param $field
 *  Field name which needs increment in value.
 * @param $type
 *  default add - and option can be "del"
 */
function stackoverflow_update_field_count($node, $field, $type = 'add') {
  //
  $node = is_object($node) ? $node : node_load($node);

  switch ($field) {
    case 'field_number_of_answers':
      if ($type == 'del') {
        $node->field_number_of_answers[LANGUAGE_NONE][0]['value'] = $node->field_number_of_answers[LANGUAGE_NONE][0]['value'] - 1;
      }
      else {
        $node->field_number_of_answers[LANGUAGE_NONE][0]['value'] = $node->field_number_of_answers[LANGUAGE_NONE][0]['value'] + 1;
      }
      break;
    case 'field_number_of_views':
      if ($type == 'del') {
        $node->field_number_of_views[LANGUAGE_NONE][0]['value'] = $node->field_number_of_views[LANGUAGE_NONE][0]['value'] - 1;
      }
      else {
        $node->field_number_of_views[LANGUAGE_NONE][0]['value'] = $node->field_number_of_views[LANGUAGE_NONE][0]['value'] + 1;
      }
      break;
    case 'field_number_of_votes':
      if ($type == 'del') {
        $node->field_number_of_votes[LANGUAGE_NONE][0]['value'] = $node->field_number_of_votes[LANGUAGE_NONE][0]['value'] - 1;
      }
      else {
        $node->field_number_of_votes[LANGUAGE_NONE][0]['value'] = $node->field_number_of_votes[LANGUAGE_NONE][0]['value'] + 1;
      }
      break;
  }
  node_save($node);
}


